options:
  logging: CLOUD_LOGGING_ONLY
  machineType: "E2_HIGHCPU_8"

steps:
  # Step 1: Build and push the image using Kaniko with caching enabled
  # Kaniko will build the image and push it to the specified destination.
  # The --cache=true flag tells Kaniko to cache layers.
  # On subsequent builds, Kaniko will pull a cached base image and only rebuild changed layers.
  - name: "gcr.io/kaniko/executor:latest"
    id: Build and Push
    args:
      - "--destination=europe-west1-docker.pkg.dev/$PROJECT_ID/first-step-images/first-step-frontend:latest"
      - "--context=."
      - "--dockerfile=Dockerfile" # Assumes your Dockerfile is in the root
      - "--cache=true"
      - "--cache-ttl=24h" # Cache layers for 24 hours

  # Step 2: Deploy the newly pushed image to Cloud Run
  # This step now runs AFTER the image has been successfully built and pushed by Kaniko.
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: Deploy
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "first-step-frontend"
      - "--image=europe-west1-docker.pkg.dev/$PROJECT_ID/first-step-images/first-step-frontend:latest"
      - "--region=europe-west1"
      - "--platform=managed"
      - "--port=3000"
      - "--allow-unauthenticated"

# This section tells Cloud Build which image to report as the final build artifact.
images:
  - "europe-west1-docker.pkg.dev/$PROJECT_ID/first-step-images/first-step-frontend:latest"
